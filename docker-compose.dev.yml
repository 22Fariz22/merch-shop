services:
  web:
    container_name: api
    build:
      context: ./
      dockerfile: docker/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
    depends_on:
      - postgresql
    restart: always
    volumes:
      - ./:/app
    env_file:
      - config.env
    networks:
      - web_api

  postgresql:
    image: ${POSTGRES_IMAGE}
    container_name: ${POSTGRES_CONTAINER_NAME}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ${POSTGRES_VOLUME}
    networks:
      - web_api

  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.migrate
    depends_on:
      - postgresql
    environment:
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
      - GOOSE_MIGRATION_DIR=./migrations
    volumes:
      - ./:/app
    networks:
      -  web_api

  redis:
    image: ${REDIS_IMAGE}
    container_name: ${REDIS_CONTAINER_NAME}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru
    restart: always
    networks:
      - web_api

networks:
  web_api:
    driver: bridge
